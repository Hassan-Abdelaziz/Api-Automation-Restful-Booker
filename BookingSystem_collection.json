{
	"info": {
		"_postman_id": "ba05be4b-7d0f-45a2-90e0-35ff885f107b",
		"name": "BookingSystem",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33492670"
	},
	"item": [
		{
			"name": "Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var TokenFile = pm.response.json()\r",
							"var usertoken = TokenFile.token\r",
							"pm.environment.set(\"token\", usertoken);\r",
							"\r",
							"// test status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// test schema validation \r",
							"pm.test(\"Check Response Schema include token \",function(){\r",
							"    pm.expect(JSON.parse(responseBody)).to.have.property(\"token\")\r",
							"})\r",
							"\r",
							"// check all attributes not null\r",
							"pm.test(\"Check Token value in response not null\",function(){\r",
							"    pm.expect(JSON.parse(responseBody).token).to.not.equal(null)\r",
							"})\r",
							"\r",
							"// check all response values have expected data type\r",
							"pm.test(\"Check data type of token in response body is string\",function(){\r",
							"    pm.expect(typeof JSON.parse(responseBody).token).to.equal(\"string\")\r",
							"})\r",
							"\r",
							"// check response time\r",
							"pm.test(\"Response time is less than 300ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// test request schema validation \r",
							"pm.test(\"Check that request body contains username\", function() {\r",
							"    var jsonBody = JSON.parse(pm.request.body.raw)\r",
							"    pm.expect(jsonBody).to.have.property(\"username\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that request body contains password\", function() {\r",
							"    var jsonBody = JSON.parse(pm.request.body.raw)\r",
							"    pm.expect(jsonBody).to.have.property(\"password\");\r",
							"});\r",
							"\r",
							"// check all request attributes not null\r",
							"pm.test(\"Check username value in request not null\",function(){\r",
							"    var jsonBody = JSON.parse(pm.request.body.raw)\r",
							"    pm.expect(jsonBody.username).to.not.equal(null)\r",
							"})\r",
							"\r",
							"pm.test(\"Check password value in request not null\",function(){\r",
							"    var jsonBody = JSON.parse(pm.request.body.raw)\r",
							"    pm.expect(jsonBody.password).to.not.equal(null)\r",
							"})\r",
							"\r",
							"// check all request values have expected data type\r",
							"pm.test(\"Check data type of username in request body\",function(){\r",
							"     var jsonBody = JSON.parse(pm.request.body.raw)\r",
							"    pm.expect(typeof jsonBody.username).to.equal(\"string\")\r",
							"})\r",
							"\r",
							"pm.test(\"Check data type of password in request body\",function(){\r",
							"     var jsonBody = JSON.parse(pm.request.body.raw)\r",
							"    pm.expect(typeof jsonBody.password).to.equal(\"string\")\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/auth",
					"host": [
						"{{url}}"
					],
					"path": [
						"auth"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get BookingIDs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// test schema validation \r",
							"pm.test(\"Check that response body contains ID\", function() {\r",
							"    pm.expect(JSON.parse(responseBody)[0]).to.have.property(\"bookingid\");\r",
							"});\r",
							"\r",
							"// check all attributes not null\r",
							"pm.test(\"Check bookingid value in response not null\",function(){\r",
							"    pm.expect(JSON.parse(responseBody)[0].bookingid).to.not.equal(null)\r",
							"})\r",
							"\r",
							"// check all response values have expected data type\r",
							"pm.test(\"Check data type of bookingid in response body is number\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody)[0].bookingid).to.equal(\"number\")\r",
							"});\r",
							"\r",
							"// check response time\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/booking",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var BookFile = pm.response.json();\r",
							"var bookid = BookFile.bookingid; \r",
							"var fname = BookFile.booking.firstname;\r",
							"var lname = BookFile.booking.lastname;\r",
							"var chkin = BookFile.booking.bookingdates.checkin;\r",
							"var chkout = BookFile.booking.bookingdates.checkout;\r",
							"\r",
							"pm.environment.set(\"id\", bookid);\r",
							"pm.environment.set(\"firstname\", fname);\r",
							"pm.environment.set(\"lastname\", lname);\r",
							"pm.environment.set(\"checkin\", chkin);\r",
							"pm.environment.set(\"checkout\", chkout);\r",
							"\r",
							"// check status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// test schema validation  \r",
							"pm.test(\"Check that response body contains bookingid\", function() {\r",
							"    pm.expect(JSON.parse(responseBody)).to.have.property(\"bookingid\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response body contains booking\", function() {\r",
							"    pm.expect(JSON.parse(responseBody)).to.have.property(\"booking\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response body contains firstname\", function() {\r",
							"    pm.expect(JSON.parse(responseBody).booking).to.have.property(\"firstname\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response body contains lastname\", function() {\r",
							"    pm.expect(JSON.parse(responseBody).booking).to.have.property(\"lastname\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response body contains totalprice\", function() {\r",
							"    pm.expect(JSON.parse(responseBody).booking).to.have.property(\"totalprice\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response body contains depositpaid\", function() {\r",
							"    pm.expect(JSON.parse(responseBody).booking).to.have.property(\"depositpaid\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response body contains bookingdates\", function() {\r",
							"    pm.expect(JSON.parse(responseBody).booking).to.have.property(\"bookingdates\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response body contains checkin\", function() {\r",
							"    pm.expect(JSON.parse(responseBody).booking.bookingdates).to.have.property(\"checkin\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response body contains checkout\", function() {\r",
							"    pm.expect(JSON.parse(responseBody).booking.bookingdates).to.have.property(\"checkout\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response body contains additionalneeds\", function() {\r",
							"    pm.expect(JSON.parse(responseBody).booking).to.have.property(\"additionalneeds\");\r",
							"});\r",
							"\r",
							"// check all attributes not null\r",
							"pm.test(\"Check bookingid value in response not null\",function(){\r",
							"    pm.expect(JSON.parse(responseBody).bookingid).to.not.equal(null)\r",
							"})\r",
							"\r",
							"pm.test(\"Check firstname value of booking in response not null\",function(){\r",
							"    pm.expect(JSON.parse(responseBody).booking.firstname).to.not.equal(null)\r",
							"})\r",
							"\r",
							"pm.test(\"Check lastname value of booking in response not null\",function(){\r",
							"    pm.expect(JSON.parse(responseBody).booking.lastname).to.not.equal(null)\r",
							"})\r",
							"\r",
							"pm.test(\"Check totalprice value of booking in response not null\",function(){\r",
							"    pm.expect(JSON.parse(responseBody).booking.totalprice).to.not.equal(null)\r",
							"})\r",
							"\r",
							"pm.test(\"Check depositpaid value of booking in response not null\",function(){\r",
							"    pm.expect(JSON.parse(responseBody).booking.depositpaid).to.not.equal(null)\r",
							"})\r",
							"\r",
							"pm.test(\"Check checkin value of bookingdates of booking in response not null\",function(){\r",
							"    pm.expect(JSON.parse(responseBody).booking.bookingdates.checkin).to.not.equal(null)\r",
							"})\r",
							"\r",
							"pm.test(\"Check checkout value of bookingdates of booking in response not null\",function(){\r",
							"    pm.expect(JSON.parse(responseBody).booking.bookingdates.checkout).to.not.equal(null)\r",
							"})\r",
							"\r",
							"pm.test(\"Check lastname value of booking in response not null\",function(){\r",
							"    pm.expect(JSON.parse(responseBody).booking.additionalneeds).to.not.equal(null)\r",
							"})\r",
							"\r",
							"// check all response values have expected data type\r",
							"pm.test(\"Check data type of bookingid in response body is number\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody).bookingid).to.equal(\"number\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of booking in response body is object\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody).booking).to.equal(\"object\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of firstname of booking in response body is string\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody).booking.firstname).to.equal(\"string\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of lastname of booking in response body is string\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody).booking.lastname).to.equal(\"string\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of totalprice of booking in response body is string\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody).booking.totalprice).to.equal(\"number\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of depositpaid of booking in response body is string\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody).booking.depositpaid).to.equal(\"boolean\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of bookingdates of booking in response body is string\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody).booking.bookingdates).to.equal(\"object\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of checkin of bookingdates of booking in response body is string\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody).booking.bookingdates.checkin).to.equal(\"date\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of checkout of bookingdates of booking in response body is string\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody).booking.bookingdates.checkout).to.equal(\"date\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of additionalneeds of booking in response body is string\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody).booking.additionalneeds).to.equal(\"string\")\r",
							"});\r",
							"\r",
							"// check all response values as expected\r",
							"pm.test(\"check firstname response value\",function(){\r",
							"    pm.expect(JSON.parse(request.data).firstname).to.equal(JSON.parse(responseBody).booking.firstname)\r",
							"})\r",
							"\r",
							"pm.test(\"check lastname response value\",function(){\r",
							"    pm.expect(JSON.parse(request.data).lastname).to.equal(JSON.parse(responseBody).booking.lastname)\r",
							"})\r",
							"\r",
							"pm.test(\"check totalprice response value\",function(){\r",
							"    pm.expect(JSON.parse(request.data).totalprice).to.equal(JSON.parse(responseBody).booking.totalprice)\r",
							"})\r",
							"\r",
							"pm.test(\"check depositpaid response value\",function(){\r",
							"    pm.expect(JSON.parse(request.data).depositpaid).to.equal(JSON.parse(responseBody).booking.depositpaid)\r",
							"})\r",
							"\r",
							"pm.test(\"check checkin of bookingdates response value\",function(){\r",
							"    pm.expect(JSON.parse(request.data).bookingdates.checkin).to.equal(JSON.parse(responseBody).booking.bookingdates.checkin)\r",
							"})\r",
							"\r",
							"pm.test(\"check checkout of bookingdates response value\",function(){\r",
							"    pm.expect(JSON.parse(request.data).bookingdates.checkout).to.equal(JSON.parse(responseBody).booking.bookingdates.checkout)\r",
							"})\r",
							"\r",
							"pm.test(\"check additionalneeds response value\",function(){\r",
							"    pm.expect(JSON.parse(request.data).additionalneeds).to.equal(JSON.parse(responseBody).booking.additionalneeds)\r",
							"})\r",
							"\r",
							"// check response time\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"hassan\",\r\n    \"lastname\" : \"abdelaziz\",\r\n    \"totalprice\" : 155,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2024-09-09\",\r\n        \"checkout\" : \"2024-09-16\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast & dinner\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/booking",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBookingByID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// test schema validation  \r",
							"pm.test(\"Check that response body contains firstname\", function() {\r",
							"    pm.expect(JSON.parse(responseBody)).to.have.property(\"firstname\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response body contains lastname\", function() {\r",
							"    pm.expect(JSON.parse(responseBody)).to.have.property(\"lastname\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response body contains totalprice\", function() {\r",
							"    pm.expect(JSON.parse(responseBody)).to.have.property(\"totalprice\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response body contains depositpaid\", function() {\r",
							"    pm.expect(JSON.parse(responseBody)).to.have.property(\"depositpaid\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response body contains bookingdates\", function() {\r",
							"    pm.expect(JSON.parse(responseBody)).to.have.property(\"bookingdates\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response body contains checkin\", function() {\r",
							"    pm.expect(JSON.parse(responseBody).bookingdates).to.have.property(\"checkin\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response body contains checkout\", function() {\r",
							"    pm.expect(JSON.parse(responseBody).bookingdates).to.have.property(\"checkout\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response body contains additionalneeds\", function() {\r",
							"    pm.expect(JSON.parse(responseBody)).to.have.property(\"additionalneeds\");\r",
							"});\r",
							"\r",
							"// check all attributes not null\r",
							"pm.test(\"Check firstname value of booking in response not null\",function(){\r",
							"    pm.expect(JSON.parse(responseBody).firstname).to.not.equal(null)\r",
							"})\r",
							"\r",
							"pm.test(\"Check lastname value of booking in response not null\",function(){\r",
							"    pm.expect(JSON.parse(responseBody).lastname).to.not.equal(null)\r",
							"})\r",
							"\r",
							"pm.test(\"Check totalprice value of booking in response not null\",function(){\r",
							"    pm.expect(JSON.parse(responseBody).totalprice).to.not.equal(null)\r",
							"})\r",
							"\r",
							"pm.test(\"Check depositpaid value of booking in response not null\",function(){\r",
							"    pm.expect(JSON.parse(responseBody).depositpaid).to.not.equal(null)\r",
							"})\r",
							"\r",
							"pm.test(\"Check checkin value of bookingdates of booking in response not null\",function(){\r",
							"    pm.expect(JSON.parse(responseBody).bookingdates.checkin).to.not.equal(null)\r",
							"})\r",
							"\r",
							"pm.test(\"Check checkout value of bookingdates of booking in response not null\",function(){\r",
							"    pm.expect(JSON.parse(responseBody).bookingdates.checkout).to.not.equal(null)\r",
							"})\r",
							"\r",
							"pm.test(\"Check lastname value of booking in response not null\",function(){\r",
							"    pm.expect(JSON.parse(responseBody).additionalneeds).to.not.equal(null)\r",
							"})\r",
							"\r",
							"// check all response values have expected data type\r",
							"pm.test(\"Check data type of booking in response body is object\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody)).to.equal(\"object\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of firstname of booking in response body is string\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody).firstname).to.equal(\"string\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of lastname of booking in response body is string\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody).lastname).to.equal(\"string\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of totalprice of booking in response body is string\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody).totalprice).to.equal(\"number\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of depositpaid of booking in response body is string\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody).depositpaid).to.equal(\"boolean\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of bookingdates of booking in response body is string\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody).bookingdates).to.equal(\"object\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of checkin of bookingdates of booking in response body is string\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody).bookingdates.checkin).to.equal(\"date\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of checkout of bookingdates of booking in response body is string\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody).bookingdates.checkout).to.equal(\"date\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of additionalneeds of booking in response body is string\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody).additionalneeds).to.equal(\"string\")\r",
							"});\r",
							"\r",
							"// check response time\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/booking/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get BookingIDsByName",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// test schema validation \r",
							"pm.test(\"Check that response body contains ID\", function() {\r",
							"    pm.expect(JSON.parse(responseBody)[0]).to.have.property(\"bookingid\");\r",
							"});\r",
							"\r",
							"// check all attributes not null\r",
							"pm.test(\"Check bookingid value in response not null\",function(){\r",
							"    pm.expect(JSON.parse(responseBody)[0].bookingid).to.not.equal(null)\r",
							"})\r",
							"\r",
							"// check all response values have expected data type\r",
							"pm.test(\"Check data type of bookingid in response body is number\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody)[0].bookingid).to.equal(\"number\")\r",
							"});\r",
							"\r",
							"// check response time\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/booking?firstname={{firstname}}&lastname={{lastname}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "firstname",
							"value": "{{firstname}}"
						},
						{
							"key": "lastname",
							"value": "{{lastname}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get BookingIDsByDate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// test schema validation \r",
							"pm.test(\"Check that response body contains ID\", function() {\r",
							"    pm.expect(JSON.parse(responseBody)[0]).to.have.property(\"bookingid\");\r",
							"});\r",
							"\r",
							"// check all attributes not null\r",
							"pm.test(\"Check bookingid value in response not null\",function(){\r",
							"    pm.expect(JSON.parse(responseBody)[0].bookingid).to.not.equal(null)\r",
							"})\r",
							"\r",
							"// check all response values have expected data type\r",
							"pm.test(\"Check data type of bookingid in response body is number\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody)[0].bookingid).to.equal(\"number\")\r",
							"});\r",
							"\r",
							"// check response time\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/booking?checkin={{checkin}}&checkout={{checkout}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "checkin",
							"value": "{{checkin}}"
						},
						{
							"key": "checkout",
							"value": "{{checkout}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var BookFile = pm.response.json(); \r",
							"var fname = BookFile.firstname;\r",
							"var lname = BookFile.lastname;\r",
							"var chkin = BookFile.bookingdates.checkin;\r",
							"var chkout = BookFile.bookingdates.checkout;\r",
							"\r",
							"pm.environment.set(\"firstname\", fname);\r",
							"pm.environment.set(\"lastname\", lname);\r",
							"pm.environment.set(\"checkin\", chkin);\r",
							"pm.environment.set(\"checkout\", chkout);\r",
							"\r",
							"// check status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// test schema validation  \r",
							"pm.test(\"Check that response body contains firstname\", function() {\r",
							"    pm.expect(JSON.parse(responseBody)).to.have.property(\"firstname\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response body contains lastname\", function() {\r",
							"    pm.expect(JSON.parse(responseBody)).to.have.property(\"lastname\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response body contains totalprice\", function() {\r",
							"    pm.expect(JSON.parse(responseBody)).to.have.property(\"totalprice\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response body contains depositpaid\", function() {\r",
							"    pm.expect(JSON.parse(responseBody)).to.have.property(\"depositpaid\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response body contains bookingdates\", function() {\r",
							"    pm.expect(JSON.parse(responseBody)).to.have.property(\"bookingdates\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response body contains checkin\", function() {\r",
							"    pm.expect(JSON.parse(responseBody).bookingdates).to.have.property(\"checkin\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response body contains checkout\", function() {\r",
							"    pm.expect(JSON.parse(responseBody).bookingdates).to.have.property(\"checkout\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response body contains additionalneeds\", function() {\r",
							"    pm.expect(JSON.parse(responseBody)).to.have.property(\"additionalneeds\");\r",
							"});\r",
							"\r",
							"// check all attributes not null\r",
							"pm.test(\"Check firstname value of booking in response not null\",function(){\r",
							"    pm.expect(JSON.parse(responseBody).firstname).to.not.equal(null)\r",
							"})\r",
							"\r",
							"pm.test(\"Check lastname value of booking in response not null\",function(){\r",
							"    pm.expect(JSON.parse(responseBody).lastname).to.not.equal(null)\r",
							"})\r",
							"\r",
							"pm.test(\"Check totalprice value of booking in response not null\",function(){\r",
							"    pm.expect(JSON.parse(responseBody).totalprice).to.not.equal(null)\r",
							"})\r",
							"\r",
							"pm.test(\"Check depositpaid value of booking in response not null\",function(){\r",
							"    pm.expect(JSON.parse(responseBody).depositpaid).to.not.equal(null)\r",
							"})\r",
							"\r",
							"pm.test(\"Check checkin value of bookingdates of booking in response not null\",function(){\r",
							"    pm.expect(JSON.parse(responseBody).bookingdates.checkin).to.not.equal(null)\r",
							"})\r",
							"\r",
							"pm.test(\"Check checkout value of bookingdates of booking in response not null\",function(){\r",
							"    pm.expect(JSON.parse(responseBody).bookingdates.checkout).to.not.equal(null)\r",
							"})\r",
							"\r",
							"pm.test(\"Check lastname value of booking in response not null\",function(){\r",
							"    pm.expect(JSON.parse(responseBody).additionalneeds).to.not.equal(null)\r",
							"})\r",
							"\r",
							"// check all response values have expected data type\r",
							"pm.test(\"Check data type of booking in response body is object\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody)).to.equal(\"object\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of firstname of booking in response body is string\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody).firstname).to.equal(\"string\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of lastname of booking in response body is string\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody).lastname).to.equal(\"string\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of totalprice of booking in response body is string\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody).totalprice).to.equal(\"number\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of depositpaid of booking in response body is string\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody).depositpaid).to.equal(\"boolean\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of bookingdates of booking in response body is string\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody).bookingdates).to.equal(\"object\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of checkin of bookingdates of booking in response body is string\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody).bookingdates.checkin).to.equal(\"date\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of checkout of bookingdates of booking in response body is string\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody).bookingdates.checkout).to.equal(\"date\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check data type of additionalneeds of booking in response body is string\",function(){\r",
							"    JSON.parse(pm.response.text())\r",
							"    pm.expect(typeof JSON.parse(responseBody).additionalneeds).to.equal(\"string\")\r",
							"});\r",
							"\r",
							"// check all response values as expected\r",
							"pm.test(\"check firstname response value\",function(){\r",
							"    pm.expect(JSON.parse(request.data).firstname).to.equal(JSON.parse(responseBody).firstname)\r",
							"})\r",
							"\r",
							"pm.test(\"check lastname response value\",function(){\r",
							"    pm.expect(JSON.parse(request.data).lastname).to.equal(JSON.parse(responseBody).lastname)\r",
							"})\r",
							"\r",
							"pm.test(\"check totalprice response value\",function(){\r",
							"    pm.expect(JSON.parse(request.data).totalprice).to.equal(JSON.parse(responseBody).totalprice)\r",
							"})\r",
							"\r",
							"pm.test(\"check depositpaid response value\",function(){\r",
							"    pm.expect(JSON.parse(request.data).depositpaid).to.equal(JSON.parse(responseBody).depositpaid)\r",
							"})\r",
							"\r",
							"pm.test(\"check checkin of bookingdates response value\",function(){\r",
							"    pm.expect(JSON.parse(request.data).bookingdates.checkin).to.equal(JSON.parse(responseBody).bookingdates.checkin)\r",
							"})\r",
							"\r",
							"pm.test(\"check checkout of bookingdates response value\",function(){\r",
							"    pm.expect(JSON.parse(request.data).bookingdates.checkout).to.equal(JSON.parse(responseBody).bookingdates.checkout)\r",
							"})\r",
							"\r",
							"pm.test(\"check additionalneeds response value\",function(){\r",
							"    pm.expect(JSON.parse(request.data).additionalneeds).to.equal(JSON.parse(responseBody).additionalneeds)\r",
							"})\r",
							"\r",
							"// check response time\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"hassan\",\r\n    \"lastname\" : \"abdelaziz\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2024-09-09\",\r\n        \"checkout\" : \"2024-09-18\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast & dinner\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/booking/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdatePartial",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"hassan\",\r\n    \"lastname\" : \"hassan\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/booking/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/booking/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Ping",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/ping",
					"host": [
						"{{url}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		}
	]
}